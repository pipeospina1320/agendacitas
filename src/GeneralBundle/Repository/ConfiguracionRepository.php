<?php

namespace GeneralBundle\Repository;

/**
 * ConfiguracionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfiguracionRepository extends \Doctrine\ORM\EntityRepository {

    public function cerrarPeriodo($periodoCierre) {
        $em = $this->getEntityManager();
        $arCierre = new \GeneralBundle\Entity\Configuracion();
        $arCierre = $em->getRepository('GeneralBundle:Configuracion')->find(1);
        $articulos = $em->getRepository('InventarioBundle:Articulo')->findAll();
        $kardex = $em->getRepository('InventarioBundle:KardexArticulo')->findAll();
        //$fechaActual = (new \DateTime('now'))->format('Ym');
        //
         //consuta ultimo cierre inventario en configuracion
        $ultimoCierreInventario = $arCierre->getUltimoCierreInventario();

        // valida si el periodo ya esta cerrado y cuales articulos no tienen saldos 
        if ($ultimoCierreInventario == $periodoCierre) {
            echo "periodo ya cerrado";
            foreach ($articulos as $codigoArticulo) {
                $articulos = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigoArticulo));
                $saldoArticulo = $em->getRepository('InventarioBundle:SaldosArticulos')->findOneBy(array('codigoArticuloFk' => $codigoArticulo, 'periodo' => $periodoCierre));
                $kardex = count($em->getRepository('InventarioBundle:KardexArticulo')->findby(array('codigoArticuloFk' => $codigoArticulo, 'periodoMovimiento' => $periodoCierre)));

                if ($articulos->getManejaKardex() == 1) {

                    if ($saldoArticulo == null) {
                        $this->consultarSaldosKardex($codigoArticulo, $periodoCierre);
                    } else
                    if ($kardex == 0) {
                        $this->ingresarSaldosCero($codigoArticulo, $periodoActual);
                    }
                }
            }
        }
        // cierre de periodo
        else {
            foreach ($articulos as $codigoArticulo) {
                $articulos = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigoArticulo));
                $saldoArticulo = $em->getRepository('InventarioBundle:SaldosArticulos')->findOneBy(array('codigoArticuloFk' => $codigoArticulo, 'periodo' => $periodoCierre));
                $kardex = count($em->getRepository('InventarioBundle:KardexArticulo')->findby(array('codigoArticuloFk' => $codigoArticulo, 'periodoMovimiento' => $periodoCierre)));

                if ($articulos->getManejaKardex() == 1) {

                    if ($saldoArticulo == null) {
                        if ($kardex == 0) {
                            $this->ingresarSaldosCero($codigoArticulo, $periodoActual);
                        }
                    }

                    if ($kardex > 0) {
                        $this->consultarSaldosKardex($codigoArticulo, $periodoCierre);
                    }
                }
            }
            $arCierre->setUltimoCierreInventario($periodoCierre);
            $em->persist($arCierre);
            $em->flush();
        }
    }

    public function consultarSaldosKardex($codigoArticulo, $periodoCierre) {
        $em = $this->getEntityManager();
        $saldos = new \InventarioBundle\Entity\SaldosArticulos();

        $articulo = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigoArticulo));
        $codigo = $articulo->getCodigoArticuloPk();


        $numeroRegistros = count($em->getRepository('InventarioBundle:KardexArticulo')->findBy(array('codigoArticuloFk' => $codigoArticulo, 'periodoMovimiento' => $periodoCierre)));

        if ($numeroRegistros == 0) {
            //saldos 
            $saldos->setArticuloRel($articulo);
            $saldos->setPeriodo($periodoCierre);
            $saldos->setSaldoInicial('0');
            $saldos->setEntradas('0');
            $saldos->setSalidas('0');
            $saldos->setSaldoFinal('0');
            $saldos->setCostoPromedio('0');
            $saldos->setCostoUnitario('0');
            $saldos->setUltimoCosto('0');
            $em->persist($saldos);
            $em->flush();
        }

        if ($numeroRegistros > 0) {
            $saldos->setArticuloRel($articulo);
            $saldos->setPeriodo($periodoCierre);

            $dql = "SELECT mk.saldoAnterior as kardex FROM InventarioBundle:KardexArticulo mk  "
                    . "WHERE mk.codigoArticuloFk = " . $codigo . " " . "AND mk.periodoMovimiento = " . $periodoCierre
                    . " ORDER by mk.fechaMovimiento ASC";
            $query = $em->createQuery($dql);
            $arrayResultado = $query->getResult();
            $saldoInicial = $arrayResultado[0]['kardex'];

            $dql = "SELECT SUM(mk.salidas) as salidas FROM InventarioBundle:KardexArticulo mk  "
                    . "WHERE mk.codigoArticuloFk = " . $codigo . " " . "AND mk.periodoMovimiento = " . $periodoCierre
                    . " ORDER by mk.fechaMovimiento ASC";
            $query = $em->createQuery($dql);
            $arrayResultado = $query->getResult();
            $salidas = $arrayResultado[0]['salidas'];

            $dql = "SELECT SUM(mk.entradas) as entradas FROM InventarioBundle:KardexArticulo mk  "
                    . "WHERE mk.codigoArticuloFk = " . $codigo . " " . "AND mk.periodoMovimiento = " . $periodoCierre
                    . " ORDER by mk.fechaMovimiento ASC";
            $query = $em->createQuery($dql);
            $arrayResultado = $query->getResult();
            $entradas = $arrayResultado[0]['entradas'];

            $dql = "SELECT mk.costoPromedio as costoPromedio FROM InventarioBundle:KardexArticulo mk  "
                    . "WHERE mk.codigoArticuloFk = " . $codigo . " " . "AND mk.periodoMovimiento = " . $periodoCierre
                    . " ORDER by mk.fechaMovimiento DESC";
            $query = $em->createQuery($dql);
            $arrayResultado = $query->getResult();
            $costoPromedio = $arrayResultado[0]['costoPromedio'];

            //saldos 
            $saldos->setSaldoInicial($saldoInicial);
            $saldos->setEntradas($entradas);
            $saldos->setSalidas($salidas);
            $saldoFinal = $saldoInicial + $entradas - $salidas;
            $saldos->setSaldoFinal($saldoFinal);
            $saldos->setCostoPromedio($costoPromedio);
            //$saldos->setCostoPromedioAnterior('0');
            $costoUnitario = $costoPromedio / $saldoFinal;
            $saldos->setCostoUnitario($costoUnitario);
            //$saldos->setCostoUnitarioAnterior('0');
            $saldos->setUltimoCosto('0');
            //$saldos->setUltimoCostoAnterior('0');
            $em->persist($saldos);
            $em->flush();
        }
    }

    public function ingresarSaldosCero($codigoArticulo, $periodoActual) {
        //$articulo = new \InventarioBundle\Entity\Articulo();
        $articulo = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigoArticulo));
        $saldos = new \InventarioBundle\Entity\SaldosArticulos();
        $saldos->setArticuloRel($articulo);
        $saldos->setPeriodo($periodoActual);
        $saldos->setSaldoInicial('0');
        $saldos->setEntradas('0');
        $saldos->setSalidas('0');
        $saldos->setSaldoFinal('0');
        $saldos->setCostoPromedio('0');
        $saldos->setCostoUnitario('0');
        $saldos->setUltimoCosto('0');
        $em->persist($saldos);
        $em->flush();
    }

}
