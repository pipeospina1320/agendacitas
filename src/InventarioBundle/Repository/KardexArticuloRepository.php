<?php

namespace InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * KardexArticuloRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KardexArticuloRepository extends \Doctrine\ORM\EntityRepository {

    public function actualizarSaldos($codigo) {
        $em = $this->getEntityManager();
        $kardex1 = new \InventarioBundle\Entity\KardexArticulo();
        $kardex1 = $em->getRepository('InventarioBundle:KardexArticulo')->findAll($codigo);
        $articulo = count($kardex1) - 1;

        for ($i = 0; $i <= $articulo; $i++) {

            if ($i == 0) {
                $dql = "SELECT pd.codigoKardexArticuloPk as kardex FROM InventarioBundle:KardexArticulo pd  "
                        . "WHERE pd.codigoArticuloFk = " . $codigo;
                $query = $em->createQuery($dql);
                $arrayResultado = $query->getResult();
                $codigoKardexPk = $arrayResultado[$i]['kardex'];

                $kardex = new \InventarioBundle\Entity\KardexArticulo();
                $kardex = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPk);
                $inicial = $kardex->getSaldoAnterior();
                $entradas = $kardex->getEntradas();
                $salidas = $kardex->getSalidas();
                $final = $kardex->setSaldoFinal($inicial + $entradas - $salidas);
                $em->persist($final);
                $em->flush();
            }

            if ($i > 0) {

                //query para consultar el Pk de la tabla kardex articulos
                $dql = "SELECT pd.codigoKardexArticuloPk as kardex FROM InventarioBundle:KardexArticulo pd  "
                        . "WHERE pd.codigoArticuloFk = " . $codigo;
                $query = $em->createQuery($dql);
                $arrayResultado = $query->getResult();

                //consulta registro anterior
                $registroAnterior = $i - 1;
                $codigoKardexPkRegistroAnterior = $arrayResultado[$registroAnterior]['kardex'];
                $kardexRegistroAnterior = new \InventarioBundle\Entity\KardexArticulo();
                $kardexRegistroAnterior = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPkRegistroAnterior);
                $inicialAnterior = $kardexRegistroAnterior->getSaldoFinal();

                //registro actual
                $registroActual = $i;
                $codigoKardexPkRegistroActual = $arrayResultado[$registroActual]['kardex'];
                $kardexRegistroActual = new \InventarioBundle\Entity\KardexArticulo();

                $kardexRegistroActual = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPkRegistroActual);
                $entradas = $kardexRegistroActual->getEntradas();
                $salidas = $kardexRegistroActual->getSalidas();
                $inicial = $kardexRegistroActual->setSaldoAnterior($inicialAnterior);
                $finalActual = $kardexRegistroActual->setSaldoFinal($inicialAnterior + $entradas - $salidas);
                $em->persist($finalActual);
                $em->flush();
            }
        }
    }


//    public function consultaEntrada($periodo, $articulo) {
//        $em = $this->getEntityManager();
//        $dql = "SELECT SUM(pd.entradas) as entradas FROM InventarioBundle:KardexArticulo pd  "
//                . "WHERE pd.codigoArticuloFk = " . $articulo . " " . "AND pd.periodoMovimiento = " . $periodo;
//        $query = $em->createQuery($dql);
//        $arrayResultado = $query->getResult();
//        $salEntradas = $arrayResultado[0]['entradas'];
//        if ($salEntradas == null) {
//            $salEntradas = 0;
//        }
//        return $salEntradas;
//    }
//
//    public function consultaSalida($periodo, $articulo) {
//        $em = $this->getEntityManager();
//        $dql = "SELECT SUM(pd.salidas) as salidas FROM InventarioBundle:KardexArticulo pd  "
//                . "WHERE pd.codigoArticuloFk = " . $articulo . " " . "AND pd.periodoMovimiento = " . $periodo;
//        $query = $em->createQuery($dql);
//        $arrayResultado = $query->getResult();
//        $salEntradas = $arrayResultado[0]['salidas'];
//        if ($salEntradas == null) {
//            $salEntradas = 0;
//        }
//        return $salEntradas;
//    }

    public function eliminarMovimiento($arrSeleccionados, $codigoFactura) {
        $em = $this->getEntityManager();
        foreach ($arrSeleccionados as $arrSeleccionados) {
            $arKardexCon = new \InventarioBundle\Entity\KardexArticulo();
            $arKardexCon = $em->getRepository('InventarioBundle:KardexArticulo')->findOneBy(array('codigoFacturaDetalleFk' => $arrSeleccionados));
            $art = $arKardexCon->getArticuloRel()->getCodigoArticuloPk();
            $arArticulo = new \InventarioBundle\Entity\Articulo(); $arArticulo = $em->getRepository('InventarioBundle:Articulo')->find($art);


            if (count($arKardexCon) == 1) {
                if ($arKardexCon->getEntradas() > 0) {
                    $cantidad = $arKardexCon->getEntradas();
                    $existencia = $arArticulo->getExistencia();
                    $arKardexCon->setEntradas($cantidad - $cantidad);
                    $arKardexCon->setSaldoFinal($cantidad - $arKardexCon->getSaldoAnterior());
                    $arArticulo->setExistencia($existencia - $cantidad);
                }
                if ($arKardexCon->getSalidas() > 0) {
                    $cantidad = $arKardexCon->getSalidas();
                    $existencia = $arArticulo->getExistencia();
                    $arKardexCon->setSalidas($cantidad - $cantidad);
                    $arKardexCon->setSaldoFinal($cantidad + $arKardexCon->getSaldoAnterior());
                    $arArticulo->setExistencia($existencia + $cantidad);
                }
                $em->remove($arKardexCon);
            }
            $em->flush();
        }
    }

    public function ingresarMovimiento($codigoFactura, $codigo, $arMovimientoDetalle) {
        $em = $this->getEntityManager();
        $arFacturaDetalle = new \FacturacionBundle\Entity\FacturaDetalle();
        $arFacturaDetalle = $em->getRepository('FacturacionBundle:FacturaDetalle')->findBy(array('codigoFacturaFk' => $codigoFactura));
        $arFacturaDetalleAct = new \FacturacionBundle\Entity\FacturaDetalle();

        $arFacturaDetalleAct = $em->getRepository('FacturacionBundle:FacturaDetalle')->findOneBy(array('codigoFacturaDetallePk' => $arMovimientoDetalle));
        $arKardexCon = new \InventarioBundle\Entity\KardexArticulo();
        $arKardexCon = $em->getRepository('InventarioBundle:KardexArticulo')->findBy(array('codigoFacturaDetalleFk' => $arFacturaDetalleAct));

        if (count($arKardexCon) == 0) {
            $arArticulo = new \InventarioBundle\Entity\Articulo();

            $arArticulo = $em->getRepository('InventarioBundle:Articulo')->find($codigo);

            if (($arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getAfectaInventario()) == 1) {
                if ($arArticulo->getManejaKardex() == 1) {

                    $arKardex = new \InventarioBundle\Entity\KardexArticulo();
                    $arKardex->setFacturaDetalleRel($arFacturaDetalleAct);
                    $arKardex->setArticuloRel($arArticulo);
                    $arKardex->setFechaMovimiento($arFacturaDetalleAct->getFacturaRel()->getFechaMovimiento());
                    $arKardex->setPeriodoMovimiento($arFacturaDetalleAct->getFacturaRel()->getFechaMovimiento()->format('Ym'));

                    //costo promedio y unitario
                    $arKardex->setCostoUnitario($arFacturaDetalleAct->getVrSubTotalUnitario());
                    $arKardex->setCostoPromedio($arFacturaDetalleAct->getVrSubTotal());

                    //variables para validadar si el comprobante afecta inventario, sumando O restando
                    $afectaInventario = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getAfectaInventario();
                    $suma = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getSuma();
                    $resta = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getResta();
                    if ($afectaInventario == 1 && $suma == 1) {

                        $arKardex->setSaldoAnterior($arArticulo->getExistencia());
                        $arKardex->setEntradas($arFacturaDetalleAct->getCantidad());
                        $arKardex->setSalidas('0');
                        $arKardex->setSaldoFinal($arFacturaDetalleAct->getCantidad() + $arKardex->getSaldoAnterior());
                        $arArticulo->setExistencia($arArticulo->getExistencia() + $arFacturaDetalleAct->getCantidad());
                    }
                    if ($afectaInventario == 1 && $resta == 1) {
                        $arKardex->setSaldoAnterior($arArticulo->getExistencia());
                        $arKardex->setSalidas($arFacturaDetalleAct->getCantidad());
                        $arKardex->setEntradas('0');
                        $arKardex->setSaldoFinal($arKardex->getSaldoAnterior() - $arFacturaDetalleAct->getCantidad());
                        $arArticulo->setExistencia($arArticulo->getExistencia() - $arFacturaDetalleAct->getCantidad());
                    }

                    $em->persist($arKardex);
                    $em->flush();
                    $saldos = $this->actualizarSaldos($codigo);
                }
            }
        }
    }

    public function validarExistencia($codigoFactura, $codigo, $cantidad) {
        $em = $this->getEntityManager();
        $validado = TRUE;
        $arMovimientoDetalle = new \InventarioBundle\Entity\Articulo();
        $arMovimientoDetalle = $this->consultaEntrada($periodo, $articulo);
        $arMovimientoDetalle = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigo));
        if ($arMovimientoDetalle->getManejaKardex() == 1) {
            $existencia = $arMovimientoDetalle->getExistencia();

            if ($existencia >= $cantidad) {
                $validado = TRUE;
            } else {
                $validado = FALSE;
            }
        }

        return $validado;
    }

}
