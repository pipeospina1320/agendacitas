<?php

namespace InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * KardexArticuloRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KardexArticuloRepository extends \Doctrine\ORM\EntityRepository {

    public function actualizarSaldos($codigo, $periodo) {
        $em = $this->getEntityManager();
        $kardex1 = new \InventarioBundle\Entity\KardexArticulo();
        $kardex1 = $em->getRepository('InventarioBundle:KardexArticulo')->findBy(array('codigoArticuloFk' => $codigo, 'periodoMovimiento' => $periodo));
        $articulo = count($kardex1);


        $periodo2 = $periodo - 1;
        $cierresperiodo = new \InventarioBundle\Entity\SaldosArticulos();
        //poner una validacion por articulo en saldos
        $cierresperiodo = $em->getRepository('InventarioBundle:SaldosArticulos')->findBy(array('periodo' => $periodo2));

        $kardex = new \InventarioBundle\Entity\KardexArticulo();
        $Saldo = new \InventarioBundle\Entity\SaldosArticulos();
        $kardexRegistroAnterior = new \InventarioBundle\Entity\KardexArticulo();
        $kardexRegistroActual = new \InventarioBundle\Entity\KardexArticulo();

        for ($i = 0; $i < $articulo; $i++) {

            if ($i == 0) {

                $dql = "SELECT mk.codigoKardexArticuloPk as kardex FROM InventarioBundle:KardexArticulo mk  "
                        . "WHERE mk.codigoArticuloFk = " . $codigo . " " . "AND mk.periodoMovimiento = " . $periodo
                        . " ORDER by mk.fechaMovimiento ASC";
                $query = $em->createQuery($dql);
                $arrayResultado = $query->getResult();
                $codigoKardexPk = $arrayResultado[$i]['kardex'];
                //saldo actual

                $kardex = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPk);

//                $dql = $em->getRepository('InventarioBundle:KardexArticulo')->
//                findOneBy(array('codigoArticuloFk' => $codigo, 'periodoMovimiento' => $periodo), array('fechaMovimiento' => 'ASC'));

                if ($cierresperiodo == null) {
                    $saldoFinalAnterior = 0;
                    $costoPromedioAnterior = 0;
                } else {
                    $dql2 = "SELECT sa.codigoSaldosArticulosPk as saldos FROM InventarioBundle:SaldosArticulos sa  "
                            . "WHERE sa.codigoArticuloFk = " . $codigo . " " . " AND sa.periodo = " . $periodo2;
                    $query = $em->createQuery($dql2);
                    $arrayResultado2 = $query->getResult();
                    $codigoSaldosPk = $arrayResultado2[$i]['saldos'];

                    //consulta a la tabla de saldos del mes anterior

                    $Saldo = $em->getRepository('InventarioBundle:SaldosArticulos')->find($codigoSaldosPk);
                    $saldoFinalAnterior = $Saldo->getSaldoFinal();
                    $costoPromedioAnterior = $Saldo->getCostoPromedio();
                }


                //costo mas la entradas
                $costoPromedio = $kardex->getCostoPromedio();
                $costoUnitario = $kardex->getCostoUnitario();
                $saldoAnterior = $kardex->getSaldoAnterior();
                $entradas = $kardex->getEntradas();
                $salidas = $kardex->getSalidas();

//                var_dump($costoPromedio);
//                exit();
                if ($saldoFinalAnterior < 0) {
                    $inicial = $saldoFinalAnterior;
                    $inicial = $kardex->setSaldoAnterior($inicial);
                    $final = $kardex->setSaldoFinal($inicial + $entradas - $salidas);
                }

                if ($saldoFinalAnterior >= 0) {
                    $inicial = $saldoFinalAnterior;
                    $kardex->setSaldoAnterior($saldoFinalAnterior);
                    $kardex->setSaldoFinal($inicial + $entradas - $salidas);

                    if ($entradas > 0) {
                        $costoPromedioActualEntradas = $costoUnitario * $entradas;
                        $costoAnteriorMASActual = $costoPromedioAnterior + $costoPromedioActualEntradas;
                        $kardex->setCostoPromedio($costoAnteriorMASActual);
                    }
                    if ($salidas > 0) {
                        $costoPromedioUnitario = $costoPromedioAnterior / $saldoFinalAnterior;
                        $costoAnteriorMENOSActual = $costoPromedioUnitario * $salidas;
                        $kardex->setCostoUnitario($costoPromedioUnitario);
                        $kardex->setCostoPromedio($costoAnteriorMENOSActual);
                    }
                }
                $em->persist($kardex);
                $em->flush();
            }

            if ($i > 0) {

                //query para consultar el Pk de la tabla kardex articulos
                $dql = "SELECT mk.codigoKardexArticuloPk as kardex FROM InventarioBundle:KardexArticulo mk  "
                        . "WHERE mk.codigoArticuloFk = " . $codigo . " " . " ORDER by mk.fechaMovimiento ASC";
                $query = $em->createQuery($dql);
                $arrayResultado = $query->getResult();

                //consulta registro anterior
                $registroAnterior = $i - 1;
                $codigoKardexPkRegistroAnterior = $arrayResultado[$registroAnterior]['kardex'];
                $kardexRegistroAnterior = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPkRegistroAnterior);
                $saldoFinalAnterior = $kardexRegistroAnterior->getSaldoFinal();
                $costoPromedioAnterior = $kardexRegistroAnterior->getCostoPromedio();

                //registro actual
                $registroActual = $i;
                $codigoKardexPkRegistroActual = $arrayResultado[$registroActual]['kardex'];
                $kardexRegistroActual = $em->getRepository('InventarioBundle:KardexArticulo')->find($codigoKardexPkRegistroActual);

                //costo mas la entradas
                $costoUnitario = $kardexRegistroActual->getCostoUnitario();
                $entradas = $kardexRegistroActual->getEntradas();
                $salidas = $kardexRegistroActual->getSalidas();

                if ($saldoFinalAnterior < 0) {
                    $inicial = $saldoFinalAnterior;
                    $inicial = $kardexRegistroActual->setSaldoAnterior($inicial);
                    $final = $kardexRegistroActual->setSaldoFinal($inicial + $entradas - $salidas);
                }

                if ($saldoFinalAnterior >= 0) {
                    $inicial = $saldoFinalAnterior;
                    $kardexRegistroActual->setSaldoAnterior($saldoFinalAnterior);
                    $kardexRegistroActual->setSaldoFinal($inicial + $entradas - $salidas);

                    if ($entradas > 0) {
                        $costoPromedioActualEntradas = $costoUnitario * $entradas;
                        $costoAnteriorMASActual = $costoPromedioAnterior + $costoPromedioActualEntradas;
                        $kardexRegistroActual->setCostoPromedio($costoAnteriorMASActual);
                    }
                    if ($salidas > 0) {
                        $costoPromedioUnitario = $costoPromedioAnterior / $saldoFinalAnterior;
                        $costoSalida = $costoPromedioUnitario * $salidas;
                        $costofinal = $costoPromedioAnterior - $costoSalida;
                        $kardexRegistroActual->setCostoUnitario($costoPromedioUnitario);
                        $kardexRegistroActual->setCostoPromedio($costofinal);
                    }
                }
                $em->persist($kardexRegistroActual);
                $em->flush();
            }
        }
    }

    public function eliminarMovimiento($arrSeleccionados, $codigoFactura) {
        $em = $this->getEntityManager();
        $consulta = new \InventarioBundle\Entity\KardexArticulo();
        $consulta = $em->getRepository('InventarioBundle:KardexArticulo')->findOneBy(array('codigoFacturaDetalleFk' => $arrSeleccionados));
        $periodo = $consulta->getPeriodoMovimiento();

        foreach ($arrSeleccionados as $arrSeleccionados) {
            $arKardexCon = new \InventarioBundle\Entity\KardexArticulo();
            $arKardexCon = $em->getRepository('InventarioBundle:KardexArticulo')->findOneBy(array('codigoFacturaDetalleFk' => $arrSeleccionados));
            $codigo = $arKardexCon->getArticuloRel()->getCodigoArticuloPk();


            if (count($arKardexCon) == 1) {
                if ($arKardexCon->getEntradas() > 0) {
                    $cantidad = $arKardexCon->getEntradas();
                    $arKardexCon->setEntradas($cantidad - $cantidad);
                    $arKardexCon->setSaldoFinal($cantidad - $arKardexCon->getSaldoAnterior());
                }
                if ($arKardexCon->getSalidas() > 0) {
                    $cantidad = $arKardexCon->getSalidas();
                    $arKardexCon->setSalidas($cantidad - $cantidad);
                    $arKardexCon->setSaldoFinal($cantidad + $arKardexCon->getSaldoAnterior());
                }
                $em->remove($arKardexCon);
            }
            $em->flush();
        }
        $saldos = $this->actualizarSaldos($codigo, $periodo);
    }

    public function ingresarMovimiento($codigoFactura, $codigo, $arMovimientoDetalle) {
        $em = $this->getEntityManager();
        $arFacturaDetalle = new \FacturacionBundle\Entity\FacturaDetalle();
        $arFacturaDetalle = $em->getRepository('FacturacionBundle:FacturaDetalle')->findBy(array('codigoFacturaFk' => $codigoFactura));
        $arFacturaDetalleAct = new \FacturacionBundle\Entity\FacturaDetalle();
        $arFacturaDetalleAct = $em->getRepository('FacturacionBundle:FacturaDetalle')->findOneBy(array('codigoFacturaDetallePk' => $arMovimientoDetalle));
        $arKardexCon = new \InventarioBundle\Entity\KardexArticulo();
        $arKardexCon = $em->getRepository('InventarioBundle:KardexArticulo')->findBy(array('codigoFacturaDetalleFk' => $arFacturaDetalleAct));

        if (count($arKardexCon) == 0) {
            $arArticulo = new \InventarioBundle\Entity\Articulo();
            $arArticulo = $em->getRepository('InventarioBundle:Articulo')->find($codigo);

            if (($arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getAfectaInventario()) == 1) {
                if ($arArticulo->getManejaKardex() == 1) {

                    $arKardex = new \InventarioBundle\Entity\KardexArticulo();
                    $arKardex->setFacturaDetalleRel($arFacturaDetalleAct);
                    $arKardex->setArticuloRel($arArticulo);
                    $arKardex->setFechaMovimiento($arFacturaDetalleAct->getFacturaRel()->getFechaMovimiento());
                    $arKardex->setPeriodoMovimiento($arFacturaDetalleAct->getFacturaRel()->getFechaMovimiento()->format('Ym'));
                    $periodo = $arFacturaDetalleAct->getFacturaRel()->getFechaMovimiento()->format('Ym');
                    //costo promedio y unitario
                    //variables para validadar si el comprobante afecta inventario, sumando O restando
                    $afectaInventario = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getAfectaInventario();
                    $suma = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getSuma();
                    $resta = $arFacturaDetalleAct->getFacturaRel()->getComprobanteRel()->getResta();
                    if ($afectaInventario == 1 && $suma == 1) {

                        $arKardex->setSaldoAnterior('0');
                        $arKardex->setEntradas($arFacturaDetalleAct->getCantidad());
                        $arKardex->setSalidas('0');
                        $arKardex->setSaldoFinal($arFacturaDetalleAct->getCantidad() + $arKardex->getSaldoAnterior());
                        $arKardex->setCostoUnitario($arFacturaDetalleAct->getVrSubTotalUnitario());
                        $arKardex->setCostoPromedio($arFacturaDetalleAct->getVrSubTotal());
                    }
                    if ($afectaInventario == 1 && $resta == 1) {
                        $arKardex->setSaldoAnterior('0');
                        $arKardex->setSalidas($arFacturaDetalleAct->getCantidad());
                        $arKardex->setEntradas('0');
                        $arKardex->setSaldoFinal($arKardex->getSaldoAnterior() - $arFacturaDetalleAct->getCantidad());
                        $arKardex->setCostoUnitario('0');
                        $arKardex->setCostoPromedio('0');
                    }

                    $em->persist($arKardex);
                    $em->flush();
                }
                $saldos = $this->actualizarSaldos($codigo, $periodo);
            }
        }
    }

    public function validarExistencia($periodo, $codigo, $cantidad, $fecha) {
        $em = $this->getEntityManager();
        $validado = FALSE;

        $configuracion = new \GeneralBundle\Entity\Configuracion();
        $configuracion = $em->getRepository('GeneralBundle:Configuracion')->find(1);
        $periodo = $configuracion->getPeriodoActual();

        $arMovimientoDetalle = new \InventarioBundle\Entity\Articulo();
        $arMovimientoDetalle = $em->getRepository('InventarioBundle:Articulo')->findOneBy(array('codigoArticuloPk' => $codigo));
        if ($arMovimientoDetalle->getManejaKardex() == 1) {

            $periodo2 = $periodo - 1;

            $kardex = new \InventarioBundle\Entity\KardexArticulo();
            $kardex = $em->getRepository('InventarioBundle:KardexArticulo')->findBy(array('codigoArticuloFk' => $codigo, 'periodoMovimiento' => $periodo));
            $movimientosKardex = count($kardex);

            $saldos = new \InventarioBundle\Entity\SaldosArticulos();
            $saldos = $em->getRepository('InventarioBundle:SaldosArticulos')->findBy(array('codigoArticuloFk' => $codigo, 'periodo' => $periodo2));
            $movimientosSaldos = count($saldos);

            if ($movimientosSaldos == 1 && $movimientosKardex == 0) {
                $dql2 = "SELECT sa.codigoSaldosArticulosPk as saldos FROM InventarioBundle:SaldosArticulos sa  "
                        . "WHERE sa.codigoArticuloFk = " . $codigo . " " . " AND sa.periodo = " . $periodo2;
                $query = $em->createQuery($dql2);
                $arrayResultado2 = $query->getResult();
                $codigoSaldosArticulosPk = $arrayResultado2[0]['saldos'];
                $saldos = $em->getRepository('InventarioBundle:SaldosArticulos')->findOneBy(array('codigoSaldosArticulosPk' => $codigoSaldosArticulosPk));
                $existencias = $saldos->getSaldoFinal();
                if ($existencias > $cantidad) {
                    $validado = TRUE;
                } else {
                    $validado = FALSE;
                }
            }
            if ($movimientosSaldos == 1 && $movimientosKardex > 0) {
                $dql2 = "SELECT sa.codigoSaldosArticulosPk as saldos FROM InventarioBundle:SaldosArticulos sa  "
                        . "WHERE sa.codigoArticuloFk = " . $codigo . " " . " AND sa.periodo = " . $periodo2;
                $query = $em->createQuery($dql2);
                $arrayResultado2 = $query->getResult();
                $codigoSaldosArticulosPk = $arrayResultado2[0]['saldos'];
                $saldos = $em->getRepository('InventarioBundle:SaldosArticulos')->findOneBy(array('codigoSaldosArticulosPk' => $codigoSaldosArticulosPk));
                $existenciasSaldos = $saldos->getSaldoFinal();

                $strFecha = $fecha->format('Y-m-d');

                $dql = "SELECT ka.codigoKardexArticuloPk as kardex FROM InventarioBundle:KardexArticulo ka  "
                        . "WHERE ka.codigoArticuloFk = " . $codigo . " " . "AND ka.periodoMovimiento = " . $periodo . " ". "AND ka.fechaMovimiento <=" . "'$strFecha'"
                        . "ORDER by ka.fechaMovimiento DESC, ka.codigoKardexArticuloPk DESC ";
                $query = $em->createQuery($dql);
                $arrayResultado = $query->getResult();
                $codigoSaldoKardexPk = $arrayResultado[0]['kardex'];
                $kardex = $em->getRepository('InventarioBundle:KardexArticulo')->findOneBy(array('codigoKardexArticuloPk' => $codigoSaldoKardexPk));
                $existenciasKardex = $kardex->getSaldoFinal();

                if ($existenciasSaldos > 0 && $existenciasKardex > 0) {
                    $validado = TRUE;
                }
                if ($existenciasSaldos == 0 && $existenciasKardex > 0) {
                    $validado = TRUE;
                }
                if ($existenciasSaldos == 0 && $existenciasKardex == 0) {
                    $validado = FALSE;
                }
            }
        }

        return $validado;
    }

}
